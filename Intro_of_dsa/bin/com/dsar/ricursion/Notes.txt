
class Solution{
  public List<List<Integer>> generatePermutation(int[] nums) {
    Set<Integer> numSet = new HashSet<>();
    for(int i = 0; i < nums.length; i++){
        numSet.add(nums[i]);
    }
    return permuteHelper(numSet);
}

public List<List<Integer>> permuteHelper(Set<Integer> numSet){
    int n = numSet.size();
    List<List<Integer>> result = new ArrayList<>();
    if(n == 0){
        return Collections.singletonList(Collections.emptyList());
    } else if(n == 1){
        result.add(new ArrayList<>(numSet));
        return result;
    }
    Set<Integer> recursionSet = new HashSet<>(numSet);
    for(Integer i : numSet){
        recursionSet.remove(i);
        List<List<Integer>> subpermutationList = permuteHelper(recursionSet);
        recursionSet.add(i);
        for(List<Integer> subpermutation : subpermutationList){
            subpermutation.add(i);
            result.add(subpermutation);
        }
    }
    return result;
}
}
